self := $(lastword $(MAKEFILE_LIST))

ocaml2zoo_dir := ./ocaml2zoo
ocaml2zoo_exe := $(ocaml2zoo_dir)/bin/ocaml2zoo.exe

source_dir := theories
sources_ml := $(wildcard $(source_dir)/*/*.ml)
sources_ml += $(ocaml2zoo_dir)/zoo.ml
sources_mli := $(addsuffix i,$(sources_ml))
sources := $(patsubst %.ml,%,$(sources_ml))
sources_cmt := $(addsuffix .cmt,$(sources))
output := $(addsuffix __code.v,$(sources))

include_dirs := $(dir $(wildcard $(source_dir)/*/.))
include_dirs += $(ocaml2zoo_dir)

opam_exec :=
# opam_exec := opam exec --switch=. --set-switch --
ocamldep := $(opam_exec) ocamldep -native $(addprefix -I ,$(include_dirs))
ocamlopt := $(opam_exec) ocamlopt -warn-error +A -w A-4-40-42 -I +unix $(addprefix -I ,$(include_dirs))

.PHONY : all
all :
	@ $(MAKE) -C $(ocaml2zoo_dir)
	@ $(MAKE) -f $(self) cmt || ($(MAKE) -f $(self) clean_cmt ; false)
	@ $(MAKE) -f $(self) gen || ($(MAKE) -f $(self) clean_cmt ; false)
	@ $(MAKE) -f $(self) clean_cmt

.PHONY : cmt
cmt : $(sources_cmt)

.PHONY : gen
gen : $(output)

.PHONY : clean_cmt
clean_cmt :
	@ for src in $(sources) ; do rm -f $$src.cm[it] ; done
	@ rm -f $(ocaml2zoo_dir)/zoo__{code,types}.v

%__code.v : %.ml %.mli
	@ $(ocaml2zoo_exe) $*.cmt

%.cmi : %.mli
	@ $(ocamlopt) $<
%.cmt : %.ml
	@ $(ocamlopt) -stop-after typing -bin-annot $<

Makefile.ocaml2zoo.depend : $(sources_mli) $(sources_ml)
	@ $(ocamldep) $(sources_mli) $(sources_ml) > $@
	@ perl -i -pe's:.cmx:.cmt:g' $@

-include Makefile.ocaml2zoo.depend

.PHONY : touch
touch :
	@ for src in $(sources_ml) ; do touch $$src ; done

.PHONY : clean
clean : clean_cmt
	@ $(MAKE) -C $(ocaml2zoo_dir) $@
